/*
    COM 309 Computer Graphics & Virtual Enviornments
    
    Midterm Project
    
    By Luke Karis and Laurence Redpath 
*/

//Determines what screen is displayed
int screenNum = 0;     

//Determines the players movement speed
int playerSpeed = 6;

//Moves player on X axis
float moveX;

//Moves player on Y axis
float moveY;

//Determines which direction the character is facing and thus which character
//model should be drawn
int direction = 0;

//Number of lives that the player has before the game makes them restart from 
//the begining
int lives = 3;

//Not sure if I need these variables
boolean victory = false;
boolean loss = false;

boolean hasGrail = false;

float henryHitBoxX = 210;
float henryHitBoxY = 475;
float henryHitBoxW = 240;
float henryHitBoxH = 40;

float saw1X = 400;
float saw1Y = 700;
float saw1R = 250;

float saw2X = 400;
float saw2Y = 100;
float saw2R = 250;

float hitBoxX = 0;
float hitBoxY = 0;
float hitBoxW = 60;
float hitBoxH = 259;

float feetHitBoxX = 0;
float feetHitBoxY = 0;
float feetHitBoxR = 20;  //update this once figure out radius

float lettersBrX = 400;  //Bottom right hitbox X position
float lettersBrY = 400;  //Bottom right hitbox Y position
float lettersBrW = 300;
float lettersBrH = 400;

float lettersTpX = 250;  //Top hitbox X position
float lettersTpY = 0;    //Top hitbox Y position
float lettersTpW = 450;
float lettersTpH = 200;

float lettersLsX = 100;  //Left side hitbox X position
float lettersLsY = 0;    //Left side hitbox Y position
float lettersLsW = 150;
float lettersLsH = 600;

float grailLX = 96;  //Left Grail X position
float grailLY = 300;
float grailLW = 65;
float grailLH = 65;

float grailMX = 362;  //Middle Grail X position
float grailMY = 300;
float grailMW = 65;
float grailMH = 65;

float grailRX = 628;  //Right Grail X position
float grailRY = 300;
float grailRW = 65;
float grailRH = 65;

float timer = 0;
float step = 0.001;

void setup()
{
  size(800, 800);
  smooth();
  noStroke();
  frameRate(30);
  
  //Starting positions of moveX and moveY
  moveX = 90;   //Original was 90
  moveY = 360;

}

void draw()
{ 
  //If screenNum variable is equal to zero then draws the intro screen
  if(screenNum == 0)
  {
    drawIntro();
  }
  
  //If screenNum variable is equal to one then draws the scene 
  else if(screenNum == 1)
  {
    drawEntrance();
    //drawLeap();
    //drawSaws();
    //drawLetters();
    //drawGrail();
  }
  
  //If screenNum variable is equal to one then draws the scene 
  else if(screenNum == 2)
  {
    drawSaws();
  }
  
  //If screenNum variable is equal to one then draws the scene 
  else if(screenNum == 3)
  {
    drawLetters();
  }
  
  //If screenNum variable is equal to one then draws the scene 
  else if(screenNum == 4)
  {
    drawLeap();
  }
  
  //If screenNum variable is equal to one then draws the scene 
  else if(screenNum == 5)
  {
    drawGrail();
  }
  
  else if(screenNum == 6)
  {
    drawVictoryScreen();
  }
  
  else if(screenNum == 7)
  {
    drawLossScreen();
  }
  
}

//Sets screenNum variable to 1 if the mouse has been pressed
void mousePressed() 
{
  if (screenNum == 0 || screenNum == 6 || screenNum == 7) 
  {
    screenNum = 1;
  }
}

//-------------------------------------------------------------------------------

//Draws intro screen that gives information on how to use/control the program
void drawIntro()
{
  background(109, 164, 249);
  
  String titleMsg = "Welcome to The Leap of Faith!";
  String author = "By Luke Karis";
  String background = "This interactive project is a recreation of the Leap of Faith scene from the movie, Indiana Jones and the Last Crusade.";
  String instruccions = "To move the character around the screen use the arrow keys";
  String click = "Click anywhere to continue";
  
  pushMatrix();
  translate(150, 150);
  textSize(40);
  text(titleMsg, 0, 0, 800, 100);
  popMatrix();
  
  pushMatrix();
  translate(150, 230);
  textSize(30);
  text(author, 0, 0);
  popMatrix();
  
  pushMatrix();
  translate(200, 300);
  textSize(25);
  text(background, 0, 0, 600, 400);
  popMatrix();
  
  pushMatrix();
  translate(200, 460);
  textSize(25);
  text(instruccions, 0, 0, 350, 200);
  popMatrix();
  
  pushMatrix();
  translate(200, 630);
  textSize(25);
  text(click, 0, 0);
  popMatrix();
}

//---------------------------------------------------------------------------

void characterMovement()
{
  pushMatrix();
  
  //If direction is equal to 0 then draws the character front on
  if (direction == 0)
  {
    translate(moveX, moveY);  //Sets new position for character to be drawn at
    drawCharacterStart();
  }
  
  //If direction is equal to 1 then draws the character from behind
  else if (direction == 1)
  {
    translate(moveX, moveY);
    drawCharacterUp();
  }
  
  //If direction is equal to 2 then draws the character facing the right
  else if (direction == 2)
  {
    translate(moveX, moveY);
    drawCharacterRight();
  }
  
  //If direction is equal to 3 then draws the character facing the left
  else if (direction == 3)
  {
    translate(moveX, moveY);
    drawCharacterLeft();
  }
  popMatrix();
}

//Draws the different Scenes
//-----------------------------------------------------------------------

void drawEntrance()
{
  background(232, 193, 99);

  fill(0);
  rect(0,150,800,4);
  
  pushMatrix();
  drawBluesiut();
  popMatrix();
  
  drawDrSchnieder();
  
  pushMatrix();
  fill(255, 0);
  translate(henryHitBoxX, henryHitBoxY);
  rect(0, 0, henryHitBoxW, henryHitBoxH);
  popMatrix();
  
  pushMatrix();
  translate(300,500);
  rotate((radians(-90)));
  drawHenry();
  popMatrix();
  
  feetHitBoxX = moveX;
  feetHitBoxY = moveY + 130;
  
  characterMovement();
  
  pushMatrix();
  fill(255, 0);
  translate(feetHitBoxX, feetHitBoxY);
  ellipse(0,0, 40, 40);
  popMatrix();
  
  if(collisionRE(henryHitBoxX, henryHitBoxY, feetHitBoxX, feetHitBoxY, 
  henryHitBoxW, henryHitBoxH, feetHitBoxR) && hasGrail)
  {
    screenNum = 6;
    hasGrail = false;
    lives = 3;
    
    moveX = 90;   
    moveY = 360;
  }
  
}

//-----------------------------------------------------------------------

void drawSaws()
{
  background(232, 193, 99);
  
  timer += step;
  float moveSaw = sin(degrees(timer))*10.0f;

  saw1Y = saw1Y + moveSaw;
  saw2Y = saw2Y - moveSaw;
  
  hitBoxX = moveX - 28;
  hitBoxY = moveY - 110;
  
  pushMatrix();
  fill(255, 0);
  translate(hitBoxX, hitBoxY);
  rect(0,0, hitBoxW, hitBoxH);
  popMatrix();
  
  characterMovement();
  
  pushMatrix();
  fill(165, 165, 145);
  translate(saw1X, saw1Y);
  ellipse(0, 0, 500, 500);
  popMatrix();
  
  pushMatrix();
  fill(165, 165, 145);
  translate(saw2X, saw2Y);
  ellipse(0, 0, 500, 500);
  popMatrix();
  
  if(collisionRE(hitBoxX, hitBoxY,saw1X, saw1Y, hitBoxW, hitBoxH, saw1R) || 
  collisionRE(hitBoxX, hitBoxY,saw2X, saw2Y, hitBoxW, hitBoxH, saw2R))
  {
    if (lives <= 0)
    {
      screenNum = 7;
      lives = 3;
      moveX = 90;   
      moveY = 360;
      hasGrail = false;
    }
    else if (lives > 0 && hasGrail == false) 
    {
      moveX = 90;
      moveY = 360;
      lives = lives - 1;
    }
    else if (lives > 0 && hasGrail)
    {
      moveX = 710;
      moveY = 360;
      lives = lives - 1;
    }
  }
}

//---------------------------------------------------------------------------

void drawLetters()
{
  background(232, 193, 99);
  
  String I = "I";
  String E = "E";
  String H = "H";
  String O = "O";
  String V = "V";
  String A = "A";
  String J = "J";
  String C = "C";
  String S = "S";
  String U = "U";
  String R = "R";
  String T = "T";
  
  pushMatrix();
  fill(216, 229, 153);
  translate(100,0);
  rect(0,0,600,800);
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(250,0);
  rect(0,0,5,800);
  rect(150,0,5,800);
  rect(300,0,5,800);
  rect(-150,200,600,5);
  rect(-150,400,600,5);
  rect(-150,600,600,5);
  popMatrix();
  
  pushMatrix();
  translate(150,125);
  textSize(100);
  text(E,0,0);
  popMatrix();
  
  pushMatrix();
  translate(150,325);
  textSize(100);
  text(J,0,0);
  popMatrix();
  
  pushMatrix();
  translate(150,525);
  textSize(100);
  text(C,0,0);
  popMatrix();
  
  pushMatrix();
  translate(150,725);
  textSize(100);
  text(I,0,0);
  popMatrix();
  
  pushMatrix();
  translate(300,125);
  textSize(100);
  text(S,0,0);
  popMatrix();
  
  pushMatrix();
  translate(300,325);
  textSize(100);
  text(O,0,0);
  popMatrix();
  
  pushMatrix();
  translate(300,525);
  textSize(100);
  text(H,0,0);
  popMatrix();
  
  pushMatrix();
  translate(300,725);
  textSize(100);
  text(E,0,0);
  popMatrix();
  
  pushMatrix();
  translate(450,125);
  textSize(100);
  text(U,0,0);
  popMatrix();
  
  pushMatrix();
  translate(450,325);
  textSize(100);
  text(V,0,0);
  popMatrix();
  
  pushMatrix();
  translate(450,525);
  textSize(100);
  text(R,0,0);
  popMatrix();
  
  pushMatrix();
  translate(450,725);
  textSize(100);
  text(I,0,0);
  popMatrix();
  
  pushMatrix();
  translate(600,125);
  textSize(100);
  text(S,0,0);
  popMatrix();
  
  pushMatrix();
  translate(600,325);
  textSize(100);
  text(A,0,0);
  popMatrix();
  
  pushMatrix();
  translate(600,525);
  textSize(100);
  text(T,0,0);
  popMatrix();
  
  pushMatrix();
  translate(600,725);
  textSize(100);
  text(S,0,0);
  popMatrix();
  
  feetHitBoxX = moveX;
  feetHitBoxY = moveY + 130;
  
  characterMovement();
  
  pushMatrix();
  fill(255, 0);
  translate(feetHitBoxX, feetHitBoxY);
  ellipse(0,0, 40, 40);
  popMatrix();
  
  if(collisionRE(lettersBrX, lettersBrY, feetHitBoxX, feetHitBoxY, 
  lettersBrW, lettersBrH, feetHitBoxR) || collisionRE(lettersTpX, lettersTpY, 
  feetHitBoxX, feetHitBoxY, lettersTpW, lettersTpH, feetHitBoxR) ||
  collisionRE(lettersLsX, lettersLsY, feetHitBoxX, feetHitBoxY, 
  lettersLsW, lettersLsH, feetHitBoxR))
  {
    if (lives <= 0)
    {
      screenNum = 7;
      lives = 3;
      moveX = 50;   
      moveY = 360;
      hasGrail = false;
    }
    else if (lives > 0 && hasGrail == false) 
    {
      moveX = 50;
      moveY = 360;
      lives = lives - 1;
    }
    else if (lives > 0 && hasGrail)
    {
      moveX = 750;
      moveY = 360;
      lives = lives - 1;
    }
  }
}

//---------------------------------------------------------------------------

//Draws background objects/scenery and the character
void drawLeap()
{
  background(232, 193, 99);
  
  //Draws background objects/scenery
  fill(58, 55, 50);
  triangle(100, 700, 400, 0, 700, 700);  //Triangle part of the chasm
  rect(100, 700, 600, 100); //Rectangular part of chasm  
  
  fill(0);
  rect(0, 700, 100, 5); //Left line
  rect(700, 700, 100, 5); //Right line
  
  String quote = "Only in the leap from the lion's head will he prove his worth";
  String direction = "To the Holy Grail!";
  
  pushMatrix();
  translate(30, 30);
  textSize(20);
  text(quote, 0, 0, 200, 300);
  popMatrix();
  
  pushMatrix();
  translate(600, 70);
  textSize(20);
  text(direction, 0, 0);
  popMatrix();
  
  //Arrow pointing towards the holy grail
  fill(0);
  rect(700, 100, 50, 3);
  triangle(750, 85, 750, 115, 765, 100); 
  
  fill(242, 239, 62);
  arc(725, 140, 40, 40, -.4, PI+QUARTER_PI, OPEN); //Holy Grail Cup
  
  pushMatrix();
  translate(715, 150);
  rotate(radians(12));
  rect(0, 0, 15, 30);//Holy Grail Base
  popMatrix();
  
  //Draws Character and allows him to move around
  characterMovement();
}

//---------------------------------------------------------------------------

void drawGrail()
{
  background(232, 193, 99);
  
  pushMatrix();
  fill(104, 83, 56);
  translate(70,150);
  rect(0,0,120,120);
  popMatrix();//left alter base
  
  pushMatrix();
  fill(104, 83, 56);
  translate(600,150);
  rect(0,0,120,120);
  popMatrix();//right alter base
  
  pushMatrix();
  fill(104, 83, 56);
  translate(335,150);
  rect(0,0,120,120);
  popMatrix();//middle alter base
  
  pushMatrix();
  fill(168, 3, 3);
  translate(96,150);
  rect(0,0,65,90);
  popMatrix();//left red piece
  
  pushMatrix();
  fill(168, 3, 3);
  translate(362,150);
  rect(0,0,65,90);
  popMatrix();//middle red piece
  
  pushMatrix();
  fill(168, 3, 3);
  translate(628,150);
  rect(0,0,65,90);
  popMatrix();//right red piece
  
  pushMatrix();
  fill(242, 239, 62);
  translate(650,130);
  rect(-2,0,19,33);
  ellipse(7,0,50,35);
  fill(232, 193, 99);
  rect(-20,-20,60,20);
  popMatrix();//right chalice
  
  pushMatrix();
  //fill(226, 193, 43);
  fill(255, 218, 96);
  translate(385,130);
  rect(-2,0,19,33);
  ellipse(7,0,50,35);
  fill(232, 193, 99);
  rect(-20,-20,60,20);
  popMatrix();//middle chalice
  
  if(hasGrail == false)
  {
    pushMatrix();
    fill(155, 127, 79);
    translate(120,130);
    rect(-2,0,19,33);
    arc(7, 0, 50, 33, 0, PI);
    popMatrix();//left chalice
  }
  
  feetHitBoxX = moveX;
  feetHitBoxY = moveY + 130;
  
  pushMatrix();
  fill(0);
  translate(grailLX, grailLY);
  rect(0, 0, grailLW, grailLH);
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(grailMX, grailMY);
  rect(0, 0, grailMW, grailMH);
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(grailRX, grailRY);
  rect(0, 0, grailRW, grailRH);
  popMatrix();
  
  characterMovement();
  
  pushMatrix();
  fill(255, 0);
  translate(feetHitBoxX, feetHitBoxY);
  ellipse(0,0, 40, 40);
  popMatrix();
  
  //temporary victory condition: picking the left grail
  if(collisionRE(grailLX, grailLY, feetHitBoxX, feetHitBoxY, 
  grailLW, grailLH, feetHitBoxR)) 
  {
    hasGrail = true;
  }
  else if(collisionRE(grailMX, grailMY, feetHitBoxX, feetHitBoxY, 
  grailMW, grailMH, feetHitBoxR)) 
  {
    screenNum = 7;
    
    lives = 3;
    hasGrail = false;
    
    moveX = 50;   
    moveY = 360;
  }
  else if(collisionRE(grailRX, grailRY, feetHitBoxX, feetHitBoxY, 
  grailRW, grailRH, feetHitBoxR)) 
  {
    screenNum = 7;
    
    lives = 3;
    hasGrail = false;
    
    moveX = 50;   
    moveY = 360;
  }
}

//---------------------------------------------------------------------------

void drawVictoryScreen()
{
  background(237, 130, 85);
}

void drawLossScreen()
{
  background(142, 34, 128);
}

//--------------------------------------------------------------------------------

//Checks button imputs and moves the character based on button imputs detected
void keyPressed() {
  if (key == CODED) 
  {
    //If the up arrow key is pressed moves the character up the screen
    //Sets deriction equal to one so the character will be drawn facing backwards
    if ((keyCode == UP) && (moveY > 110)) 
    {
      direction = 1;
      moveY = moveY - playerSpeed;
    }
    //If the down arrow key is pressed moves the character down the screen
    //Sets deriction equal to zero so the character will be drawn facing forwards
    else if ((keyCode == DOWN) && (moveY < 550))
    {
      direction = 0;
      moveY = moveY + playerSpeed;
    } 
    //If the right arrow key is pressed moves the character to the right
    //Sets deriction equal to zero so the character will be drawn facing the right
    else if (keyCode == RIGHT)
    {
      if(moveX > 800 && screenNum != 5) //Changes the scene if the character is far enought to the right
      {
        screenNum = screenNum + 1;
        moveX = 40;
      }
     
      direction = 2;
      moveX = moveX + playerSpeed;
      
    }
    //If the left arrow key is pressed moves the character to the left
    //Sets deriction equal to zero so the character will be drawn facing the left
    else if (keyCode == LEFT)
    {
      if(moveX < 0 && screenNum != 1) //Changes the scene if the character is far enought to the left
      {
        screenNum = screenNum - 1;
        moveX = 760;
      }
      direction = 3;
      moveX = moveX - playerSpeed;
    }
  }
}

//---------------------------------------------------------------------------

//Detects Collisions between rectangles and ellipses
//This code was influenced by code from: http://www.jeffreythompson.org/collision-detection/circle-rect.php
boolean collisionRE(float rectX, float rectY, float circleX, float circleY,
float rectW, float rectH, float circleRadius)
{
 PVector topLeft = new PVector(rectX, rectY);
 PVector topRight = new PVector(rectX + rectW, rectY);
 PVector botLeft = new PVector(rectX, rectY + rectH);
 PVector botRight = new PVector(rectX + rectW, rectY + rectH);
 PVector circleCenter = new PVector(circleX, circleY);
 
 float tLDist = PVector.dist(topLeft, circleCenter);
 float tRDist = PVector.dist(topRight, circleCenter);
 float bLDist = PVector.dist(botLeft, circleCenter);
 float bRDist = PVector.dist(botRight, circleCenter);
 
 if(tLDist < circleRadius || tRDist < circleRadius || bLDist < circleRadius || bRDist < circleRadius)
 {
   return true;
 }
 else if(circleX < rectX && circleY > rectY && circleY < rectY + rectH)
 {
   PVector collisionPt = new PVector(rectX, circleY);
   if(PVector.dist(collisionPt, circleCenter) < circleRadius)
   {
     return true;
   }
 }
 else if(circleX > rectX + rectW && circleY > rectY && circleY < rectY + rectH)
 {
   PVector collisionPt = new PVector(rectX + rectW, circleY);
   if(PVector.dist(collisionPt, circleCenter) < circleRadius)
   {
     return true;
   }
 }
 else if(circleY < rectY && circleX > rectX && circleX < rectX + rectW )
 {
   PVector collisionPt = new PVector(circleX, rectY);
   if(PVector.dist(collisionPt, circleCenter) < circleRadius)
   {
     return true;
   }
 }
 else if(circleY > rectY + rectH && circleX > rectX && circleX < rectX + rectW)
 {
   PVector collisionPt = new PVector(circleX, rectY + rectH);
   if(PVector.dist(collisionPt, circleCenter) < circleRadius)
   {
     return true;
   }
 }

 return false;
}

//-------------------------------------------------------------------------

void drawHenry()
{
  pushMatrix();
  fill(239, 0, 0);
  translate(-25,0);
  ellipse(0,0,30,80);  //Blood pool DH
  popMatrix();
  
  pushMatrix();
  fill(132, 109, 71);
  translate(-10, 50);
  rect(0, 0, 20, 90);  //Righ pant leg DH
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(10, 140);
  ellipse(0, 0, 20, 20);  //Right Shoe Base DH
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-10, 130);
  rect(0, 0, 20, 20);  //Right Shoe Upper Sole DH
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(0, 140);
  rect(0, 0, 20, 10);  //Right Shoe Lower Sole DH
  popMatrix();
  
  fill(242, 236, 227);
  ellipse(0, 0, 45, 110); //White body DH
  
  pushMatrix();
  fill(252, 230, 176);  //Skin color DH
  translate(0, -70);
  ellipse(0, 0, 40, 40);  //Head DH
  popMatrix();
  
  pushMatrix();
  fill(188, 171, 171);
  translate(-12,-72);
  ellipse(0,0,20,40);
  popMatrix();
  
  pushMatrix();
  fill(255);
  translate(10, -70);
  ellipse(0,0, 10, 13);  //Right eye background DH
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(11, -69);
  ellipse(0, 0, 3, 3);   //Right pupil DH
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(9, -55);
  rotate(radians(-93));
  rect(0, 0, .7, 7.5);  //Mouth DH
  popMatrix();
 
  pushMatrix();
  fill(214, 213, 164);
  translate(-25, -40);
  rect(0, 0, 25, 100);  //Right jacket main body DH
  popMatrix();
 
  pushMatrix();
  fill(252, 230, 176);
  translate(10, 37);
  ellipse(0, 0, 17, 17); //Right Palm DH
  popMatrix();
  
  pushMatrix();
  fill(214, 213, 164);
  translate(-16, -28);
  rotate(radians(-15));
  rect(0, 0, 20, 65);  //Right Jacket Sleeve DH
  popMatrix();
  
  pushMatrix();
  fill(214, 213, 164);
  translate(-25, -40);
  triangle(0, 0, 25, 0, 14, -10);  //Jacket collar DH
  popMatrix();
   
}

void drawDrSchnieder()
{
  pushMatrix();
  fill(220, 226, 83);
  translate(600,30);
  ellipse(0,0,50,70);//Ponytail
  popMatrix();
  
  pushMatrix();
  fill(118, 119, 95);
  translate(578, 150);
  rect(0, 0, 20, 90);  //Left pant leg DS
  popMatrix();
  
  pushMatrix();
  fill(118, 119, 95);
  translate(602, 150);
  rect(0, 0, 20, 90); //Right pant leg DS
  popMatrix();
  
  pushMatrix();
  fill(242, 236, 227);
  translate(600,100);
  ellipse(0, 0, 45, 110); //White body DS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176);  //Skin color DS
  translate(600, 30);
  ellipse(0, 0, 40, 50);  //Head DS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176); 
  translate(582, 30);
  ellipse(0, 0, 10, 15);  //Left ear DS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176); 
  translate(618, 30);
  ellipse(0, 0, 10, 15);  //Right ear DS
  popMatrix();
  
  pushMatrix();
  fill(255);
  translate(590, 30);
  ellipse(0,0, 10, 13); //Left eye background DS
  popMatrix();
  
  pushMatrix();
  fill(255);
  translate(610, 30);
  ellipse(0,0, 10, 13);  //Right eye background DS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(591, 31);
  ellipse(0, 0, 3, 3);  //Left pupil DS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(609, 31);
  ellipse(0, 0, 3, 3);   //Right pupil DS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(600,32);
  rotate(radians(-40));
  rect(0, 0, .5, 9.5);  //Top part of nose DS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(599, 40);
  rotate(radians(-90));
  rect(0, 0, .5, 7);  //Bottom part of nose DS
  popMatrix();
  
  pushMatrix();
  fill(186, 74, 0);
  translate(598, 48);
  rotate(radians(-85));
  rect(0, 0, .7, 7.5);  //Mouth DS
  popMatrix();
  
  pushMatrix();
  fill(220, 226, 83);
  translate(600, 13);
  ellipse(0, 0, 33, 15);  //hair DS
  popMatrix();
  
  pushMatrix();
  fill(44, 109, 55);
  translate(587.5, -7);
  rect(0, 0, 25, 20);  //Hat top DS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(587.5, 0);
  rect(0, 0, 25, 6);  //Hat black strap DS
  popMatrix();
  
  pushMatrix();
  fill(209, 202, 150);
  translate(571.5, 60);
  rect(0, 0, 20, 100);  //Left jacket main body DS
  popMatrix();
  
  pushMatrix();
  fill(209, 202, 150);
  translate(608.6, 60);
  rect(0, 0, 20, 100);  //Right jacket main body DS
  popMatrix();
  
  pushMatrix();
  fill(209, 202, 150);
  translate(571.4, 60);  
  triangle(0, 0, 20, -8.5, 20, 0);  //Left Jacket Collar DS
  popMatrix();
  
  pushMatrix();
  fill(209, 202, 150);
  translate(608.6, 60);
  triangle(0,0, 20, 0, 0, -8.5); //Right Jacket Collar DS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176);
  translate(540, 122);
  ellipse(0, 0, 17, 17);  //Left Palm DS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176);
  translate(660, 122);
  ellipse(0, 0, 17, 17); //Right Palm DS
  popMatrix();
  
  pushMatrix();
  fill(209, 202, 150);
  translate(571.4, 60);
  rotate(radians(35));
  rect(0, 0, 20, 65);  //Left Jacket Sleeve DS
  popMatrix();
  
  pushMatrix();
  fill(209, 202, 150);
  translate(612, 72);
  rotate(radians(-35));
  rect(0, 0, 20, 65);  //Right Jacket Sleeve DS
  popMatrix();
 
  pushMatrix();
  fill(0);
  translate(588, 240);
  ellipse(0, 0, 20, 20);  //Left Shoe Base DS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(612, 240);
  ellipse(0, 0, 20, 20);  //Right Shoe Base DS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(578, 240);
  rect(0, 0, 20, 10);  //Left Shoe Sole DS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(602, 240);
  rect(0, 0, 20, 10);  //Right Shoe Sole DS
  popMatrix();
  endShape();
}

void drawBluesiut()
{
   pushMatrix();
  fill(239, 245, 255);
  translate(378, 150);
  rect(0, 0, 20, 90);  //Left pant leg BS
  popMatrix();
  
  pushMatrix();
  fill(239, 245, 255);
  translate(402, 150);
  rect(0, 0, 20, 90); //Right pant leg BS
  popMatrix();
  
  pushMatrix();
  fill(148, 186, 247);
  translate(400,100);
  ellipse(0, 0, 45, 110); //White body BS
  popMatrix();

  pushMatrix();
  fill(0);
  translate(400,90);
  triangle(0,0,-15,-50,15,-50);
  popMatrix();

  pushMatrix();
  fill(96, 97, 99);
  translate(400, 13);
  ellipse(0, 0, 40, 20);  //Hat base BS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176);  //Skin color BS
  translate(400, 30);
  ellipse(0, 0, 40, 50);  //Head BS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176); 
  translate(382, 30);
  ellipse(0, 0, 10, 15);  //Left ear BS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176); 
  translate(418, 30);
  ellipse(0, 0, 10, 15);  //Right ear BS
  popMatrix();
  
  pushMatrix();
  fill(255);
  translate(390, 30);
  ellipse(0,0, 10, 13); //Left eye background BS
  popMatrix();
  
  pushMatrix();
  fill(255);
  translate(410, 30);
  ellipse(0,0, 10, 13);  //Right eye background BS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(391, 31);
  ellipse(0, 0, 3, 3);  //Left pupil BS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(409, 31);
  ellipse(0, 0, 3, 3);   //Right pupil BS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(400,32);
  rotate(radians(-40));
  rect(0, 0, .5, 9.5);  //Top part of nose BS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(399, 40);
  rotate(radians(-90));
  rect(0, 0, .5, 7);  //Bottom part of nose BS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(398, 48);
  rotate(radians(-85));
  rect(0, 0, .7, 7.5);  //Mouth BS
  popMatrix();
  
  pushMatrix();
  fill(148, 186, 247);
  translate(371.5, 60);
  rect(0, 0, 20, 100);  //Left jacket main body BS
  popMatrix();
  
  pushMatrix();
  fill(148, 186, 247);
  translate(408.6, 60);
  rect(0, 0, 20, 100);  //Right jacket main body BS
  popMatrix();
  
  pushMatrix();
  fill(148, 186, 247);
  translate(371.4, 60);  
  triangle(0, 0, 20, -8.5, 20, 0);  //Left Jacket Collar BS
  popMatrix();
  
  pushMatrix();
  fill(148, 186, 247);
  translate(408.6, 60);
  triangle(0,0, 20, 0, 0, -8.5); //Right Jacket Collar BS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176);
  translate(340, 122);
  ellipse(0, 0, 17, 17);  //Left Palm BS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176);
  translate(460, 122);
  ellipse(0, 0, 17, 17); //Right Palm BS
  popMatrix();
  
  pushMatrix();
  fill(148, 186, 247);
  translate(371.4, 60);
  rotate(radians(35));
  rect(0, 0, 20, 65);  //Left Jacket Sleeve BS
  popMatrix();
  
  pushMatrix();
  fill(148, 186, 247);
  translate(412, 72);
  rotate(radians(-35));
  rect(0, 0, 20, 65);  //Right Jacket Sleeve BS
  popMatrix();
 
  pushMatrix();
  fill(0);
  translate(388, 240);
  ellipse(0, 0, 20, 20);  //Left Shoe Base BS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(412, 240);
  ellipse(0, 0, 20, 20);  //Right Shoe Base BS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(378, 240);
  rect(0, 0, 20, 10);  //Left Shoe Sole BS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(402, 240);
  rect(0, 0, 20, 10);  //Right Shoe Sole BS
  popMatrix();
}

//Draws Chacter Front on
//CS Stands for Character Start
void drawCharacterStart()
{ 
  pushMatrix();
  fill(132, 109, 71);
  translate(-22, 50);
  rect(0, 0, 20, 90);  //Left pant leg CS
  popMatrix();
  
  pushMatrix();
  fill(132, 109, 71);
  translate(2, 50);
  rect(0, 0, 20, 90); //Right pant leg CS
  popMatrix();
  
  fill(242, 236, 227);
  ellipse(0, 0, 45, 110); //White body CS
  
  pushMatrix();
  fill(252, 230, 176);  //Skin color CS
  translate(0, -70);
  ellipse(0, 0, 40, 50);  //Head CS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176); 
  translate(-18, -70);
  ellipse(0, 0, 10, 15);  //Left ear CS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176); 
  translate(18, -70);
  ellipse(0, 0, 10, 15);  //Right ear CS
  popMatrix();
  
  pushMatrix();
  fill(255);
  translate(-10, -70);
  ellipse(0,0, 10, 13); //Left eye background CS
  popMatrix();
  
  pushMatrix();
  fill(255);
  translate(10, -70);
  ellipse(0,0, 10, 13);  //Right eye background CS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-9, -69);
  ellipse(0, 0, 3, 3);  //Left pupil CS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(9, -69);
  ellipse(0, 0, 3, 3);   //Right pupil CS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(0,-68);
  rotate(radians(-40));
  rect(0, 0, .5, 9.5);  //Top part of nose CS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-1, -60);
  rotate(radians(-90));
  rect(0, 0, .5, 7);  //Bottom part of nose CS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-2, -52);
  rotate(radians(-85));
  rect(0, 0, .7, 7.5);  //Mouth CS
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(0, -90);
  ellipse(0, 0, 55, 15);  //Hat base CS
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-12.5, -110);
  rect(0, 0, 25, 20);  //Hat top CS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-12.5, -100);
  rect(0, 0, 25, 6);  //Hat black strap CS
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-28.6, -40);
  rect(0, 0, 20, 100);  //Left jacket main body CS
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(8.6, -40);
  rect(0, 0, 20, 100);  //Right jacket main body CS
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-28.6, -40);  
  triangle(0, 0, 20, -8.5, 20, 0);  //Left Jacket Collar CS
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(8.6, -40);
  triangle(0,0, 20, 0, 0, -8.5); //Right Jacket Collar CS
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176);
  translate(-60, 22);
  ellipse(0, 0, 17, 17);  //Left Palm CS
  popMatrix();
  
  if(hasGrail)
  {
    pushMatrix();
    fill(155, 127, 79);
    translate(-92, 20);
    rotate(radians(-50));
    rect(-2,0,19,33);
    arc(7, 0, 50, 33, 0, PI);
    popMatrix();//left chalice CS
  }
  
  pushMatrix();
  fill(252, 230, 176);
  translate(60, 22);
  ellipse(0, 0, 17, 17); //Right Palm CS
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-28.6, -40);
  rotate(radians(35));
  rect(0, 0, 20, 65);  //Left Jacket Sleeve CS
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(12, -28);
  rotate(radians(-35));
  rect(0, 0, 20, 65);  //Right Jacket Sleeve CS
  popMatrix();
 
  pushMatrix();
  fill(0);
  translate(-12, 140);
  ellipse(0, 0, 20, 20);  //Left Shoe Base CS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(12, 140);
  ellipse(0, 0, 20, 20);  //Right Shoe Base CS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-22, 140);
  rect(0, 0, 20, 10);  //Left Shoe Sole CS
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(2, 140);
  rect(0, 0, 20, 10);  //Right Shoe Sole CS
  popMatrix();
  
}

//Draws the character from behind
//CU stands for Character Up
void drawCharacterUp()
{
  pushMatrix();
  fill(132, 109, 71);
  translate(-22, 50);
  rect(0, 0, 20, 90);  //Left pant leg CU
  popMatrix();
  
  pushMatrix();
  fill(132, 109, 71);
  translate(2, 50);
  rect(0, 0, 20, 90); //Right pant leg CU
  popMatrix();
  
  fill(242, 236, 227);
  ellipse(0, 0, 45, 110); //White body CU
  
  pushMatrix();
  fill(252, 230, 176);  //Skin color CU
  translate(0, -70);
  ellipse(0, 0, 40, 50);  //Head CU
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176); 
  translate(-18, -70);
  ellipse(0, 0, 10, 15);  //Left ear CU
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176); 
  translate(18, -70);
  ellipse(0, 0, 10, 15);  //Right ear CU
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(0, -90);
  ellipse(0, 0, 55, 15);  //Hat base CU
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-12.5, -110);
  rect(0, 0, 25, 20);  //Hat top CU
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-12.5, -100);
  rect(0, 0, 25, 6);  //Hat black strap CU
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-28.6, -40);  
  triangle(0, 0, 20, -8.5, 20, 0);  //Left Jacket Collar CU
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(8.6, -40);
  triangle(0,0, 20, 0, 0, -8.5); //Right Jacket Collar CU
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-9, -48);
  rect(0, 0, 18, 10); //Middle Jacket Collar CU
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176);
  translate(-60, 22);
  ellipse(0, 0, 17, 17);  //Left Palm CU
  popMatrix();
  
  if(hasGrail)
  {
    pushMatrix();
    fill(155, 127, 79);
    translate(-92, 20);
    rotate(radians(-50));
    rect(-2,0,19,33);
    arc(7, 0, 50, 33, 0, PI);
    popMatrix();//left chalice CU
  }
  
  pushMatrix();
  fill(252, 230, 176);
  translate(60, 22);
  ellipse(0, 0, 17, 17); //Right Palm CU
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-28.6, -40);
  rotate(radians(35));
  rect(0, 0, 20, 65);  //Left Jacket Sleeve CU
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(12, -28);
  rotate(radians(-35));
  rect(0, 0, 20, 65);  //Right Jacket Sleeve CU
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-28.6, -40);
  rect(0,0, 56, 100);  //Jacket Back CU
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-22, 130);
  rect(0, 0, 20, 20);  //Left Shoe Sole CU
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(2, 130);
  rect(0, 0, 20, 20);  //Right Shoe Sole CU
  popMatrix();
}

//Draws Character facing the left
//CL stands for Character Left
void drawCharacterLeft()
{ 
  pushMatrix();
  fill(132, 109, 71);
  translate(-10, 50);
  rect(0, 0, 20, 90);  //Left pant leg CL
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-12, 140);
  ellipse(0, 0, 20, 20);  //Left Shoe Base CL
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-10, 130);
  rect(0, 0, 20, 20);  //Left Shoe Upper Sole CL
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-22, 140);
  rect(0, 0, 20, 10);  //Left Shoe Lower Sole CL
  popMatrix();
  
  fill(242, 236, 227);
  ellipse(0, 0, 45, 110); //White body CL
  
  pushMatrix();
  fill(252, 230, 176);  //Skin color CL
  translate(0, -70);
  ellipse(0, 0, 40, 50);  //Head CL
  popMatrix();
  
  pushMatrix();
  fill(255);
  translate(-10, -70);
  ellipse(0,0, 10, 13); //Left eye background CL
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-11, -69);
  ellipse(0, 0, 3, 3);  //Left pupil CL
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-16, -55);
  rotate(radians(-93));
  rect(0, 0, .7, 7.5);  //Mouth CL
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(0, -90);
  ellipse(0, 0, 55, 15);  //Hat base CL
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-12.5, -110);
  rect(0, 0, 25, 20);  //Hat top CL
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-12.5, -100);
  rect(0, 0, 25, 6);  //Hat black strap CL
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(0, -40);
  rect(0, 0, 25, 100);  //Left jacket main body CL
  popMatrix();
  
  pushMatrix();
  fill(252, 230, 176);
  translate(-31.4, 22);
  ellipse(0, 0, 17, 17);  //Left Palm CL
  popMatrix();
  
  if(hasGrail)
  {
    pushMatrix();
    fill(155, 127, 79);
    translate(-62, 20);
    rotate(radians(-50));
    rect(-2,0,19,33);
    arc(7, 0, 50, 33, 0, PI);
    popMatrix();//left chalice CL
  }
  
  pushMatrix();
  fill(114, 93, 59);
  translate(0, -40);
  rotate(radians(35));
  rect(0, 0, 20, 65);  //Left Jacket Sleeve CL
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(0, -40);
  triangle(0, 0, 25, 0, 14, -10);  //Jacket collar CL
  popMatrix();
}

//Draws Character facing the right
//CR stands for Character Right
void drawCharacterRight()
{ 
  pushMatrix();
  fill(132, 109, 71);
  translate(-10, 50);
  rect(0, 0, 20, 90);  //Righ pant leg CR
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(10, 140);
  ellipse(0, 0, 20, 20);  //Right Shoe Base CR
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-10, 130);
  rect(0, 0, 20, 20);  //Right Shoe Upper Sole CR
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(0, 140);
  rect(0, 0, 20, 10);  //Right Shoe Lower Sole CR
  popMatrix();
  
  fill(242, 236, 227);
  ellipse(0, 0, 45, 110); //White body CR
  
  pushMatrix();
  fill(252, 230, 176);  //Skin color CR
  translate(0, -70);
  ellipse(0, 0, 40, 50);  //Head CR
  popMatrix();
  
  pushMatrix();
  fill(255);
  translate(10, -70);
  ellipse(0,0, 10, 13);  //Right eye background CR
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(11, -69);
  ellipse(0, 0, 3, 3);   //Right pupil CR
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(9, -55);
  rotate(radians(-93));
  rect(0, 0, .7, 7.5);  //Mouth CR
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(0, -90);
  ellipse(0, 0, 55, 15);  //Hat base CR
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-12.5, -110);
  rect(0, 0, 25, 20);  //Hat top CR
  popMatrix();
  
  pushMatrix();
  fill(0);
  translate(-12.5, -100);
  rect(0, 0, 25, 6);  //Hat black strap CR
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-25, -40);
  rect(0, 0, 25, 100);  //Right jacket main body CR
  popMatrix();
 
  pushMatrix();
  fill(252, 230, 176);
  translate(32, 22);
  ellipse(0, 0, 17, 17); //Right Palm CR
  popMatrix();
  
  if(hasGrail)
  {
    pushMatrix();
    fill(155, 127, 79);
    translate(53, 10);
    rotate(radians(50));
    rect(-2,0,19,33);
    arc(7, 0, 50, 33, 0, PI);
    popMatrix();//left chalice CR
  }
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-16, -28);
  rotate(radians(-35));
  rect(0, 0, 20, 65);  //Right Jacket Sleeve CR
  popMatrix();
  
  pushMatrix();
  fill(114, 93, 59);
  translate(-25, -40);
  triangle(0, 0, 25, 0, 14, -10);  //Jacket collar CR
  popMatrix();
}
